/** 
 * This file was generated by 'vite-plugin-kit-routes'
 * 
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

export const PAGES = {
  "_ROOT": () =>  {
    return ensurePrefix(`/`)
  },
  "app_components_firebase_app": () =>  {
    return ensurePrefix(`/app/components/firebase-app`)
  },
  "app_stores_context": () =>  {
    return ensurePrefix(`/app/stores/context`)
  },
  "auth_components_user": () =>  {
    return ensurePrefix(`/auth/components/user`)
  },
  "auth_states_user": () =>  {
    return ensurePrefix(`/auth/states/user`)
  },
  "auth_stores_user": () =>  {
    return ensurePrefix(`/auth/stores/user`)
  },
  "firestore_components_collection": () =>  {
    return ensurePrefix(`/firestore/components/collection`)
  },
  "firestore_components_collection_group": () =>  {
    return ensurePrefix(`/firestore/components/collection-group`)
  },
  "firestore_components_doc": () =>  {
    return ensurePrefix(`/firestore/components/doc`)
  },
  "firestore_states_collection": () =>  {
    return ensurePrefix(`/firestore/states/collection`)
  },
  "firestore_states_collection_group": () =>  {
    return ensurePrefix(`/firestore/states/collection-group`)
  },
  "firestore_states_doc": () =>  {
    return ensurePrefix(`/firestore/states/doc`)
  },
  "firestore_stores_collection": () =>  {
    return ensurePrefix(`/firestore/stores/collection`)
  },
  "firestore_stores_collection_group": () =>  {
    return ensurePrefix(`/firestore/stores/collection-group`)
  },
  "firestore_stores_doc": () =>  {
    return ensurePrefix(`/firestore/stores/doc`)
  },
  "guides_get_started": () =>  {
    return ensurePrefix(`/guides/get-started`)
  },
  "guides_get_started_states": () =>  {
    return ensurePrefix(`/guides/get-started-states`)
  },
  "realtime_db_components_node": () =>  {
    return ensurePrefix(`/realtime-db/components/node`)
  },
  "realtime_db_components_node_list": () =>  {
    return ensurePrefix(`/realtime-db/components/node-list`)
  },
  "realtime_db_states_node": () =>  {
    return ensurePrefix(`/realtime-db/states/node`)
  },
  "realtime_db_states_node_list": () =>  {
    return ensurePrefix(`/realtime-db/states/node-list`)
  },
  "realtime_db_stores_node": () =>  {
    return ensurePrefix(`/realtime-db/stores/node`)
  },
  "realtime_db_stores_node_list": () =>  {
    return ensurePrefix(`/realtime-db/stores/node-list`)
  },
  "remote_config_components_remote_config": () =>  {
    return ensurePrefix(`/remote-config/components/remote-config`)
  },
  "remote_config_components_remote_config_boolean": () =>  {
    return ensurePrefix(`/remote-config/components/remote-config-boolean`)
  },
  "remote_config_components_remote_config_number": () =>  {
    return ensurePrefix(`/remote-config/components/remote-config-number`)
  },
  "remote_config_components_remote_config_string": () =>  {
    return ensurePrefix(`/remote-config/components/remote-config-string`)
  },
  "remote_config_components_remote_config_value": () =>  {
    return ensurePrefix(`/remote-config/components/remote-config-value`)
  },
  "remote_config_states_remote_config": () =>  {
    return ensurePrefix(`/remote-config/states/remote-config`)
  },
  "remote_config_states_remote_config_boolean": () =>  {
    return ensurePrefix(`/remote-config/states/remote-config-boolean`)
  },
  "remote_config_states_remote_config_number": () =>  {
    return ensurePrefix(`/remote-config/states/remote-config-number`)
  },
  "remote_config_states_remote_config_string": () =>  {
    return ensurePrefix(`/remote-config/states/remote-config-string`)
  },
  "remote_config_states_remote_config_value": () =>  {
    return ensurePrefix(`/remote-config/states/remote-config-value`)
  },
  "remote_config_stores_remote_config": () =>  {
    return ensurePrefix(`/remote-config/stores/remote-config`)
  },
  "remote_config_stores_remote_config_boolean": () =>  {
    return ensurePrefix(`/remote-config/stores/remote-config-boolean`)
  },
  "remote_config_stores_remote_config_number": () =>  {
    return ensurePrefix(`/remote-config/stores/remote-config-number`)
  },
  "remote_config_stores_remote_config_string": () =>  {
    return ensurePrefix(`/remote-config/stores/remote-config-string`)
  },
  "remote_config_stores_remote_config_value": () =>  {
    return ensurePrefix(`/remote-config/stores/remote-config-value`)
  },
  "storage_components_download_url": () =>  {
    return ensurePrefix(`/storage/components/download-url`)
  },
  "storage_components_storage_list": () =>  {
    return ensurePrefix(`/storage/components/storage-list`)
  },
  "storage_components_upload_task": () =>  {
    return ensurePrefix(`/storage/components/upload-task`)
  },
  "storage_states_download_url": () =>  {
    return ensurePrefix(`/storage/states/download-url`)
  },
  "storage_states_storage_list": () =>  {
    return ensurePrefix(`/storage/states/storage-list`)
  },
  "storage_states_upload_task": () =>  {
    return ensurePrefix(`/storage/states/upload-task`)
  },
  "storage_stores_download_url": () =>  {
    return ensurePrefix(`/storage/stores/download-url`)
  },
  "storage_stores_storage_list": () =>  {
    return ensurePrefix(`/storage/stores/storage-list`)
  },
  "storage_stores_upload_task": () =>  {
    return ensurePrefix(`/storage/stores/upload-task`)
  },
  "test": () =>  {
    return ensurePrefix(`/test`)
  }
}

export const SERVERS = {
  "sitemap.xml": () =>  {
    return ensurePrefix(`/sitemap.xml`)
  }
}

export const ACTIONS = {
  
}

const appendSp = (sp?: Record<string, string | number | undefined>) => {
  if (sp === undefined) return ''
  const mapping = Object.entries(sp)
    .filter(c => c[1] !== undefined)
    .map(c => [c[0], String(c[1])])

  const formated = new URLSearchParams(mapping).toString()
  if (formated) {
    return `?${formated}`
  }
  return ''
}

const ensurePrefix = (str: string) => {
  if (str.startsWith('/')) {
    return str
  }
  return `/${str}`
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
* 
* Full example:
* ```ts
* import type { KIT_ROUTES } from './ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
* 
* kitRoutes<KIT_ROUTES>({
*  extend: {
*    PAGES: {
*      // here, "paths" it will be typed!
*    }
*  }
* })
* ```
*/
export type KIT_ROUTES = { 
  PAGES: { '_ROOT': never, 'app_components_firebase_app': never, 'app_stores_context': never, 'auth_components_user': never, 'auth_states_user': never, 'auth_stores_user': never, 'firestore_components_collection': never, 'firestore_components_collection_group': never, 'firestore_components_doc': never, 'firestore_states_collection': never, 'firestore_states_collection_group': never, 'firestore_states_doc': never, 'firestore_stores_collection': never, 'firestore_stores_collection_group': never, 'firestore_stores_doc': never, 'guides_get_started': never, 'guides_get_started_states': never, 'realtime_db_components_node': never, 'realtime_db_components_node_list': never, 'realtime_db_states_node': never, 'realtime_db_states_node_list': never, 'realtime_db_stores_node': never, 'realtime_db_stores_node_list': never, 'remote_config_components_remote_config': never, 'remote_config_components_remote_config_boolean': never, 'remote_config_components_remote_config_number': never, 'remote_config_components_remote_config_string': never, 'remote_config_components_remote_config_value': never, 'remote_config_states_remote_config': never, 'remote_config_states_remote_config_boolean': never, 'remote_config_states_remote_config_number': never, 'remote_config_states_remote_config_string': never, 'remote_config_states_remote_config_value': never, 'remote_config_stores_remote_config': never, 'remote_config_stores_remote_config_boolean': never, 'remote_config_stores_remote_config_number': never, 'remote_config_stores_remote_config_string': never, 'remote_config_stores_remote_config_value': never, 'storage_components_download_url': never, 'storage_components_storage_list': never, 'storage_components_upload_task': never, 'storage_states_download_url': never, 'storage_states_storage_list': never, 'storage_states_upload_task': never, 'storage_stores_download_url': never, 'storage_stores_storage_list': never, 'storage_stores_upload_task': never, 'test': never }
  SERVERS: { 'sitemap.xml': never }
  ACTIONS: {  }
  Storage_Params: {  }
}

import { browser } from '$app/environment'
import { writable } from 'svelte/store'

const _kitRoutes = <T>(key: string, initValues?: T) => {
  const store = writable<T>(initValues, set => {
    if (browser) {
      if(initValues){
        const v = localStorage.getItem(key)
        if (v) {
          try {
            const json = JSON.parse(v)
            set(json)
          } catch (error) {
            set(initValues)
          }
        } else {
          set(initValues)
        }
      } else {
        set({} as any)
      }

      const handleStorage = (event: StorageEvent) => {
        if (event.key === key) set(event.newValue ? JSON.parse(event.newValue) : null)
      }
      window.addEventListener('storage', handleStorage)
      return () => window.removeEventListener('storage', handleStorage)
    } else {
      if(initValues) {
        set(initValues)
      } else {
        set({} as any)
      }
    }
  })

  return {
    subscribe: store.subscribe,
    update: (u: T) => {
      if (browser) {
        localStorage.setItem(key, JSON.stringify(u))
      } 
      store.update(() => u)
    },
  }
}

export type StorageParams = { }
/**
 *
 * Example of usage:
 * ```ts
 *  import { afterNavigate } from '$app/navigation'
 *  import { kitRoutes } from './ROUTES.js'
 *
 *  afterNavigate(() => {
 *	  kitRoutes.update({ lang: $page.params.lang })
 *  })
 * ```
 *
 */
export let kitRoutes = _kitRoutes<StorageParams>('kitRoutes')


